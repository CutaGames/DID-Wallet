package com.tancheng.carbonchain.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tancheng.carbonchain.activities.asset.wallet.db.entity.ETHWallet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ETHWALLET".
*/
public class ETHWalletDao extends AbstractDao<ETHWallet, Long> {

    public static final String TABLENAME = "ETHWALLET";

    /**
     * Properties of entity ETHWallet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property KeystorePath = new Property(4, String.class, "keystorePath", false, "KEYSTORE_PATH");
        public final static Property Mnemonic = new Property(5, String.class, "mnemonic", false, "MNEMONIC");
        public final static Property PrivateKey = new Property(6, String.class, "privateKey", false, "PRIVATE_KEY");
        public final static Property CoinIds = new Property(7, String.class, "coinIds", false, "COIN_IDS");
        public final static Property PwdTips = new Property(8, String.class, "pwdTips", false, "PWD_TIPS");
        public final static Property WalletType = new Property(9, int.class, "walletType", false, "WALLET_TYPE");
        public final static Property IsCurrent = new Property(10, boolean.class, "isCurrent", false, "IS_CURRENT");
        public final static Property IsBackup = new Property(11, boolean.class, "isBackup", false, "IS_BACKUP");
    }


    public ETHWalletDao(DaoConfig config) {
        super(config);
    }
    
    public ETHWalletDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ETHWALLET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADDRESS\" TEXT," + // 1: address
                "\"NAME\" TEXT UNIQUE ," + // 2: name
                "\"PASSWORD\" TEXT," + // 3: password
                "\"KEYSTORE_PATH\" TEXT," + // 4: keystorePath
                "\"MNEMONIC\" TEXT," + // 5: mnemonic
                "\"PRIVATE_KEY\" TEXT," + // 6: privateKey
                "\"COIN_IDS\" TEXT," + // 7: coinIds
                "\"PWD_TIPS\" TEXT," + // 8: pwdTips
                "\"WALLET_TYPE\" INTEGER NOT NULL ," + // 9: walletType
                "\"IS_CURRENT\" INTEGER NOT NULL ," + // 10: isCurrent
                "\"IS_BACKUP\" INTEGER NOT NULL );"); // 11: isBackup
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ETHWALLET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ETHWallet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String keystorePath = entity.getKeystorePath();
        if (keystorePath != null) {
            stmt.bindString(5, keystorePath);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(6, mnemonic);
        }
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(7, privateKey);
        }
 
        String coinIds = entity.getCoinIds();
        if (coinIds != null) {
            stmt.bindString(8, coinIds);
        }
 
        String pwdTips = entity.getPwdTips();
        if (pwdTips != null) {
            stmt.bindString(9, pwdTips);
        }
        stmt.bindLong(10, entity.getWalletType());
        stmt.bindLong(11, entity.getIsCurrent() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsBackup() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ETHWallet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String keystorePath = entity.getKeystorePath();
        if (keystorePath != null) {
            stmt.bindString(5, keystorePath);
        }
 
        String mnemonic = entity.getMnemonic();
        if (mnemonic != null) {
            stmt.bindString(6, mnemonic);
        }
 
        String privateKey = entity.getPrivateKey();
        if (privateKey != null) {
            stmt.bindString(7, privateKey);
        }
 
        String coinIds = entity.getCoinIds();
        if (coinIds != null) {
            stmt.bindString(8, coinIds);
        }
 
        String pwdTips = entity.getPwdTips();
        if (pwdTips != null) {
            stmt.bindString(9, pwdTips);
        }
        stmt.bindLong(10, entity.getWalletType());
        stmt.bindLong(11, entity.getIsCurrent() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsBackup() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ETHWallet readEntity(Cursor cursor, int offset) {
        ETHWallet entity = new ETHWallet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // address
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // keystorePath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mnemonic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // privateKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // coinIds
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pwdTips
            cursor.getInt(offset + 9), // walletType
            cursor.getShort(offset + 10) != 0, // isCurrent
            cursor.getShort(offset + 11) != 0 // isBackup
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ETHWallet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKeystorePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMnemonic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrivateKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCoinIds(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPwdTips(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWalletType(cursor.getInt(offset + 9));
        entity.setIsCurrent(cursor.getShort(offset + 10) != 0);
        entity.setIsBackup(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ETHWallet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ETHWallet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ETHWallet entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
