package com.tancheng.carbonchain.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tancheng.carbonchain.activities.asset.wallet.db.entity.TransactionRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_RECORD".
*/
public class TransactionRecordDao extends AbstractDao<TransactionRecord, Long> {

    public static final String TABLENAME = "TRANSACTION_RECORD";

    /**
     * Properties of entity TransactionRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TokenId = new Property(1, int.class, "tokenId", false, "TOKEN_ID");
        public final static Property WalletType = new Property(2, Integer.class, "walletType", false, "WALLET_TYPE");
        public final static Property CoinAddress = new Property(3, String.class, "coinAddress", false, "COIN_ADDRESS");
        public final static Property FromAddr = new Property(4, String.class, "fromAddr", false, "FROM_ADDR");
        public final static Property ToAddr = new Property(5, String.class, "toAddr", false, "TO_ADDR");
        public final static Property Value = new Property(6, Double.class, "value", false, "VALUE");
        public final static Property TxHash = new Property(7, String.class, "txHash", false, "TX_HASH");
        public final static Property TimeStamp = new Property(8, java.util.Date.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Status = new Property(9, Integer.class, "status", false, "STATUS");
        public final static Property Direct = new Property(10, Integer.class, "direct", false, "DIRECT");
        public final static Property Gas = new Property(11, Long.class, "gas", false, "GAS");
        public final static Property GasLimit = new Property(12, Long.class, "gasLimit", false, "GAS_LIMIT");
        public final static Property Fee = new Property(13, String.class, "fee", false, "FEE");
        public final static Property BlockNumber = new Property(14, String.class, "blockNumber", false, "BLOCK_NUMBER");
        public final static Property Error = new Property(15, Integer.class, "error", false, "ERROR");
        public final static Property Remark = new Property(16, String.class, "remark", false, "REMARK");
    }


    public TransactionRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOKEN_ID\" INTEGER NOT NULL ," + // 1: tokenId
                "\"WALLET_TYPE\" INTEGER," + // 2: walletType
                "\"COIN_ADDRESS\" TEXT," + // 3: coinAddress
                "\"FROM_ADDR\" TEXT," + // 4: fromAddr
                "\"TO_ADDR\" TEXT," + // 5: toAddr
                "\"VALUE\" REAL," + // 6: value
                "\"TX_HASH\" TEXT," + // 7: txHash
                "\"TIME_STAMP\" INTEGER," + // 8: timeStamp
                "\"STATUS\" INTEGER," + // 9: status
                "\"DIRECT\" INTEGER," + // 10: direct
                "\"GAS\" INTEGER," + // 11: gas
                "\"GAS_LIMIT\" INTEGER," + // 12: gasLimit
                "\"FEE\" TEXT," + // 13: fee
                "\"BLOCK_NUMBER\" TEXT," + // 14: blockNumber
                "\"ERROR\" INTEGER," + // 15: error
                "\"REMARK\" TEXT);"); // 16: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTokenId());
 
        Integer walletType = entity.getWalletType();
        if (walletType != null) {
            stmt.bindLong(3, walletType);
        }
 
        String coinAddress = entity.getCoinAddress();
        if (coinAddress != null) {
            stmt.bindString(4, coinAddress);
        }
 
        String fromAddr = entity.getFromAddr();
        if (fromAddr != null) {
            stmt.bindString(5, fromAddr);
        }
 
        String toAddr = entity.getToAddr();
        if (toAddr != null) {
            stmt.bindString(6, toAddr);
        }
 
        Double value = entity.getValue();
        if (value != null) {
            stmt.bindDouble(7, value);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(8, txHash);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(9, timeStamp.getTime());
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        Integer direct = entity.getDirect();
        if (direct != null) {
            stmt.bindLong(11, direct);
        }
 
        Long gas = entity.getGas();
        if (gas != null) {
            stmt.bindLong(12, gas);
        }
 
        Long gasLimit = entity.getGasLimit();
        if (gasLimit != null) {
            stmt.bindLong(13, gasLimit);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(14, fee);
        }
 
        String blockNumber = entity.getBlockNumber();
        if (blockNumber != null) {
            stmt.bindString(15, blockNumber);
        }
 
        Integer error = entity.getError();
        if (error != null) {
            stmt.bindLong(16, error);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(17, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTokenId());
 
        Integer walletType = entity.getWalletType();
        if (walletType != null) {
            stmt.bindLong(3, walletType);
        }
 
        String coinAddress = entity.getCoinAddress();
        if (coinAddress != null) {
            stmt.bindString(4, coinAddress);
        }
 
        String fromAddr = entity.getFromAddr();
        if (fromAddr != null) {
            stmt.bindString(5, fromAddr);
        }
 
        String toAddr = entity.getToAddr();
        if (toAddr != null) {
            stmt.bindString(6, toAddr);
        }
 
        Double value = entity.getValue();
        if (value != null) {
            stmt.bindDouble(7, value);
        }
 
        String txHash = entity.getTxHash();
        if (txHash != null) {
            stmt.bindString(8, txHash);
        }
 
        java.util.Date timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindLong(9, timeStamp.getTime());
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(10, status);
        }
 
        Integer direct = entity.getDirect();
        if (direct != null) {
            stmt.bindLong(11, direct);
        }
 
        Long gas = entity.getGas();
        if (gas != null) {
            stmt.bindLong(12, gas);
        }
 
        Long gasLimit = entity.getGasLimit();
        if (gasLimit != null) {
            stmt.bindLong(13, gasLimit);
        }
 
        String fee = entity.getFee();
        if (fee != null) {
            stmt.bindString(14, fee);
        }
 
        String blockNumber = entity.getBlockNumber();
        if (blockNumber != null) {
            stmt.bindString(15, blockNumber);
        }
 
        Integer error = entity.getError();
        if (error != null) {
            stmt.bindLong(16, error);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(17, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionRecord readEntity(Cursor cursor, int offset) {
        TransactionRecord entity = new TransactionRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // tokenId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // walletType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coinAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fromAddr
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // toAddr
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // value
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // txHash
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // timeStamp
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // direct
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // gas
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // gasLimit
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fee
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // blockNumber
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // error
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTokenId(cursor.getInt(offset + 1));
        entity.setWalletType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCoinAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromAddr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToAddr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setValue(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setTxHash(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimeStamp(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDirect(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setGas(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setGasLimit(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setFee(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBlockNumber(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setError(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setRemark(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
