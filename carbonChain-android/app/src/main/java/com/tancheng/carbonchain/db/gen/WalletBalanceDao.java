package com.tancheng.carbonchain.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tancheng.carbonchain.activities.asset.wallet.db.entity.WalletBalance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALLET_BALANCE".
*/
public class WalletBalanceDao extends AbstractDao<WalletBalance, Long> {

    public static final String TABLENAME = "WALLET_BALANCE";

    /**
     * Properties of entity WalletBalance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WalletAddress = new Property(1, String.class, "walletAddress", false, "WALLET_ADDRESS");
        public final static Property Symbol = new Property(2, String.class, "symbol", false, "SYMBOL");
        public final static Property Balance = new Property(3, double.class, "balance", false, "BALANCE");
        public final static Property Price = new Property(4, double.class, "price", false, "PRICE");
    }


    public WalletBalanceDao(DaoConfig config) {
        super(config);
    }
    
    public WalletBalanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLET_BALANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WALLET_ADDRESS\" TEXT," + // 1: walletAddress
                "\"SYMBOL\" TEXT," + // 2: symbol
                "\"BALANCE\" REAL NOT NULL ," + // 3: balance
                "\"PRICE\" REAL NOT NULL );"); // 4: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLET_BALANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WalletBalance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String walletAddress = entity.getWalletAddress();
        if (walletAddress != null) {
            stmt.bindString(2, walletAddress);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(3, symbol);
        }
        stmt.bindDouble(4, entity.getBalance());
        stmt.bindDouble(5, entity.getPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WalletBalance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String walletAddress = entity.getWalletAddress();
        if (walletAddress != null) {
            stmt.bindString(2, walletAddress);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(3, symbol);
        }
        stmt.bindDouble(4, entity.getBalance());
        stmt.bindDouble(5, entity.getPrice());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WalletBalance readEntity(Cursor cursor, int offset) {
        WalletBalance entity = new WalletBalance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // walletAddress
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // symbol
            cursor.getDouble(offset + 3), // balance
            cursor.getDouble(offset + 4) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WalletBalance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWalletAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSymbol(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBalance(cursor.getDouble(offset + 3));
        entity.setPrice(cursor.getDouble(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WalletBalance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WalletBalance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WalletBalance entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
